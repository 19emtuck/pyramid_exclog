import logging
from functools import partial

from pyramid.tweens import EXCVIEW
from pyramid.settings import asbool
from pyramid.settings import aslist
from pyramid.util import DottedNameResolver

resolver = DottedNameResolver(None)

import __builtin__

def as_globals_list(value):
    L = []
    value = aslist(value)
    for dottedname in value:
        if dottedname in __builtin__.__dict__:
            dottedname = '__builtin__.%s' % dottedname
        obj = resolver.resolve(dottedname)
        L.append(obj)
    return L

def exclog_tween_factory(handler, registry):

    get = registry.settings.get

    ignored = get('exclog.ignore', ())

    def exclog_tween(request, getLogger=logging.getLogger):
        # getLogger injected for testing purposes
        try:
            return handler(request)
        except ignored:
            raise
        except:
            logger = getLogger('exc_logger')
            logger.exception(request.url)
            raise

    return exclog_tween

def includeme(config):
    """
    Set up am implicit :term:`tween to log exception information that is
    generated by your Pyramid application.  The logging data will be sent to
    the Python logger named ``pyramid_errorlog``.

    By default this tween configured to be placed 'above' the exception view
    tween, which will cause only exceptions which are not caught by an
    :term:`exception view` to be logged.

    The tween can alternately be configured to be placed between the main
    Pyramid app and the Pyramid exception view tween, which will cause *all*
    exceptions (even those eventually caught by a Pyramid exception view,
    which will include exceptions such as ``HTTPFound`` and others
    signifiying redirects) to be logged.  To turn this feature on, use the
    ``exclog.catchall`` configuration setting with a value of
    ``true``.
    """
    get = config.registry.settings.get
    catchall = asbool(get('exclog.catchall','false'))
    ignored = as_globals_list(get('exclog.ignore', ''))
    config.registry.settings['exclog.ignore'] = tuple(ignored)
    add = partial(config.add_tween, exclog_tween_factory, alias='exclog')
    if catchall:
        add(under=EXCVIEW)
    else:
        add(over=EXCVIEW)
